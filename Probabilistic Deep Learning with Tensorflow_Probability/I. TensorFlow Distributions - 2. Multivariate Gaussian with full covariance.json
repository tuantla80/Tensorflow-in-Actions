{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Multivariate Gaussian with full covariance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this reading you will learn how you can use TensorFlow to specify any multivariate Gaussian distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TF version: 2.1.0\n",
      "TFP version: 0.9.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow_probability as tfp\n",
    "tfd = tfp.distributions\n",
    "\n",
    "print(\"TF version:\", tf.__version__)\n",
    "print(\"TFP version:\", tfp.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So far, you've seen how to define multivariate Gaussian distributions using `tfd.MultivariateNormalDiag`. This class allows you to specify a multivariate Gaussian with a diagonal covariance matrix $\\Sigma$. \n",
    "\n",
    "In cases where the variance is the same for each component, i.e. $\\Sigma = \\sigma^2 I$, this is known as a _spherical_ or _isotropic_ Gaussian. This name comes from the spherical (or circular) contours of its probability density function, as you can see from the plot below for the two-dimensional case. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the approximate density contours of a 2d spherical Gaussian\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "spherical_2d_gaussian = tfd.MultivariateNormalDiag(loc=[0., 0.])\n",
    "\n",
    "N = 100000\n",
    "x = spherical_2d_gaussian.sample(N)\n",
    "x1 = x[:, 0]\n",
    "x2 = x[:, 1]\n",
    "sns.jointplot(x1, x2, kind='kde', space=0, );"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you know, a diagonal covariance matrix results in the components of the random vector being independent. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Full covariance with `MultivariateNormalFullTriL`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can define a full covariance Gaussian distribution in TensorFlow using the Distribution `tfd.MultivariateNormalTriL`.\n",
    "\n",
    "Mathematically, the parameters of a multivariate Gaussian are a mean $\\mu$ and a covariance matrix $\\Sigma$, and so the `tfd.MultivariateNormalTriL` constructor requires two arguments:\n",
    "\n",
    "- `loc`, a Tensor of floats corresponding to $\\mu$,\n",
    "- `scale_tril`, a a lower-triangular matrix $L$ such that $LL^T = \\Sigma$.\n",
    "\n",
    "For a $d$-dimensional random variable, the lower-triangular matrix $L$ looks like this:\n",
    "\n",
    "\\begin{equation}\n",
    "    L = \\begin{bmatrix}\n",
    "            l_{1, 1} & 0 & 0 & \\cdots & 0 \\\\\n",
    "            l_{2, 1} & l_{2, 2} & 0 & \\cdots & 0  \\\\\n",
    "            l_{3, 1} & l_{3, 2} & l_{3, 3} & \\cdots & 0  \\\\\n",
    "            \\vdots  & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
    "            l_{d, 1} & l_{d, 2} & l_{d, 3} & \\cdots & l_{d, d}\n",
    "        \\end{bmatrix},\n",
    "\\end{equation}\n",
    "\n",
    "where the diagonal entries are positive: $l_{i, i} > 0$ for $i=1,\\ldots,d$.\n",
    "\n",
    "Here is an example of creating a two-dimensional Gaussian with non-diagonal covariance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[[1.  0.6]\n",
      " [0.6 1. ]], shape=(2, 2), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "# Set the mean and covariance parameters\n",
    "\n",
    "mu = [0., 0.]  # mean\n",
    "scale_tril = [[1.,  0.],\n",
    "              [0.6, 0.8]]\n",
    "\n",
    "sigma = tf.matmul(tf.constant(scale_tril), tf.transpose(tf.constant(scale_tril)))  # covariance matrix\n",
    "print(sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tfp.distributions.MultivariateNormalTriL 'MultivariateNormalTriL' batch_shape=[] event_shape=[2] dtype=float32>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create the 2D Gaussian with full covariance\n",
    "\n",
    "nonspherical_2d_gaussian = tfd.MultivariateNormalTriL(loc=mu, scale_tril=scale_tril)\n",
    "nonspherical_2d_gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(2,), dtype=float32, numpy=array([0., 0.], dtype=float32)>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the Distribution mean\n",
    "\n",
    "nonspherical_2d_gaussian.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(2, 2), dtype=float32, numpy=\n",
       "array([[1. , 0.6],\n",
       "       [0.6, 1. ]], dtype=float32)>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the Distribution covariance\n",
    "\n",
    "nonspherical_2d_gaussian.covariance()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": [
     "\"hide_input\""
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot its approximate density contours\n",
    "\n",
    "x = nonspherical_2d_gaussian.sample(N)\n",
    "x1 = x[:, 0]\n",
    "x2 = x[:, 1]\n",
    "sns.jointplot(x1, x2, kind='kde', space=0, color='r');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, the approximate density contours are now elliptical rather than circular. This is because the components of the Gaussian are correlated.\n",
    "\n",
    "Also note that the marginal distributions (shown on the sides of the plot) are both univariate Gaussian distributions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Cholesky decomposition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above example, we defined the lower triangular matrix $L$ and used that to build the multivariate Gaussian distribution. The covariance matrix is easily computed from $L$ as $\\Sigma = LL^T$.\n",
    "\n",
    "The reason that we define the multivariate Gaussian distribution in this way - as opposed to directly passing in the covariance matrix - is that not every matrix is a valid covariance matrix. The covariance matrix must have the following properties:\n",
    "\n",
    "1. It is symmetric\n",
    "2. It is positive (semi-)definite\n",
    "\n",
    "_NB: A symmetric matrix $M \\in \\mathbb{R}^{d\\times d}$ is positive semi-definite if it satisfies $b^TMb \\ge 0$ for all nonzero $b\\in\\mathbb{R}^d$. If, in addition, we have $b^TMb = 0 \\Rightarrow b=0$ then $M$ is positive definite._\n",
    "\n",
    "The Cholesky decomposition is a useful way of writing a covariance matrix. The decomposition is described by this result:\n",
    "\n",
    "> For every real-valued symmetric positive-definite matrix $M$, there is a unique lower-diagonal matrix $L$ that has  positive diagonal entries for which  \n",
    ">\n",
    "> \\begin{equation}\n",
    "     LL^T = M\n",
    " \\end{equation}\n",
    "> This is called the _Cholesky decomposition_ of $M$.\n",
    "\n",
    "This result shows us why Gaussian distributions with full covariance are completely represented by the `MultivariateNormalTriL` Distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `tf.linalg.cholesky`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In case you have a valid covariance matrix $\\Sigma$ and would like to compute the lower triangular matrix $L$ above to instantiate a `MultivariateNormalTriL` object, this can be done with the `tf.linalg.cholesky` function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a symmetric positive-definite matrix\n",
    "\n",
    "sigma = [[10., 5.], [5., 10.]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(2, 2), dtype=float32, numpy=\n",
       "array([[3.1622777, 0.       ],\n",
       "       [1.5811388, 2.738613 ]], dtype=float32)>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute the lower triangular matrix L from the Cholesky decomposition\n",
    "\n",
    "scale_tril = tf.linalg.cholesky(sigma)\n",
    "scale_tril"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(2, 2), dtype=float32, numpy=\n",
       "array([[10.      ,  5.      ],\n",
       "       [ 5.      , 10.000001]], dtype=float32)>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check that LL^T = Sigma\n",
    "\n",
    "tf.linalg.matmul(scale_tril, tf.transpose(scale_tril))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the argument to the `tf.linalg.cholesky` is not positive definite, then it will fail:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cholesky decomposition was not successful. The input might not be valid. [Op:Cholesky]\n"
     ]
    }
   ],
   "source": [
    "# Try to compute the Cholesky decomposition for a matrix with negative eigenvalues\n",
    "\n",
    "bad_sigma = [[10., 11.], [11., 10.]]\n",
    "\n",
    "try:\n",
    "    scale_tril = tf.linalg.cholesky(bad_sigma)\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What about positive semi-definite matrices?\n",
    "\n",
    "In cases where the matrix is only positive semi-definite, the Cholesky decomposition exists (if the diagonal entries of $L$ can be zero) but it is not unique.\n",
    "\n",
    "For covariance matrices, this corresponds to the degenerate case where the probability density function collapses to a subspace of the event space. This is demonstrated in the following example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tfp.distributions.MultivariateNormalTriL 'MultivariateNormalTriL' batch_shape=[] event_shape=[2] dtype=float32>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a multivariate Gaussian with a positive semi-definite covariance matrix\n",
    "\n",
    "psd_mvn = tfd.MultivariateNormalTriL(loc=[0., 0.], scale_tril=[[1., 0.], [0.4, 0.]])\n",
    "psd_mvn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot samples from this distribution\n",
    "\n",
    "x = psd_mvn.sample(N)\n",
    "x1 = x[:, 0]\n",
    "x2 = x[:, 1]\n",
    "plt.xlim(-5, 5)\n",
    "plt.ylim(-5, 5)\n",
    "plt.title(\"Scatter plot of samples\")\n",
    "plt.scatter(x1, x2, alpha=0.5);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the input to the function `tf.linalg.cholesky` is positive semi-definite but not positive definite, it will also fail:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cholesky decomposition was not successful. The input might not be valid. [Op:Cholesky]\n"
     ]
    }
   ],
   "source": [
    "# Try to compute the Cholesky decomposition for a positive semi-definite matrix\n",
    "\n",
    "another_bad_sigma = [[10., 0.], [0., 0.]]\n",
    "\n",
    "try:\n",
    "    scale_tril = tf.linalg.cholesky(another_bad_sigma)\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In summary: if the covariance matrix $\\Sigma$ for your multivariate Gaussian distribution is positive-definite, then an algorithm that computes the Cholesky decomposition of $\\Sigma$ returns a lower-triangular matrix $L$ such that $LL^T = \\Sigma$. This $L$ can then be passed as the `scale_tril` of `MultivariateNormalTriL`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Putting it all together"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You are now ready to put everything that you have learned in this reading together.\n",
    "\n",
    "To create a multivariate Gaussian distribution with full covariance you need to:\n",
    "\n",
    "1. Specify parameters $\\mu$ and either $\\Sigma$ (a symmetric positive definite matrix) or $L$ (a lower triangular matrix with positive diagonal elements), such that $\\Sigma = LL^T$.\n",
    "\n",
    "2. If only $\\Sigma$ is specified, compute `scale_tril = tf.linalg.cholesky(sigma)`.\n",
    "\n",
    "3. Create the distribution: `multivariate_normal = tfd.MultivariateNormalTriL(loc=mu, scale_tril=scale_tril)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a multivariate Gaussian distribution\n",
    "\n",
    "mu = [1., 2., 3.]\n",
    "sigma = [[0.5, 0.1, 0.1],\n",
    "         [0.1,  1., 0.6],\n",
    "         [0.1, 0.6, 2.]]\n",
    "\n",
    "scale_tril = tf.linalg.cholesky(sigma)\n",
    "\n",
    "multivariate_normal = tfd.MultivariateNormalTriL(loc=mu, scale_tril=scale_tril)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(3, 3), dtype=float32, numpy=\n",
       "array([[0.49999997, 0.1       , 0.1       ],\n",
       "       [0.1       , 1.0000001 , 0.6       ],\n",
       "       [0.1       , 0.6       , 2.        ]], dtype=float32)>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the covariance matrix\n",
    "\n",
    "multivariate_normal.covariance()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(3,), dtype=float32, numpy=array([1., 2., 3.], dtype=float32)>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the mean\n",
    "\n",
    "multivariate_normal.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deprecated: `MultivariateNormalFullCovariance`\n",
    "\n",
    "There was previously a class called `tfd.MultivariateNormalFullCovariance` which takes the full covariance matrix in its constructor, but this is being deprecated. Two reasons for this are:\n",
    "\n",
    "* covariance matrices are symmetric, so specifying one directly involves passing redundant information, which involves writing unnecessary code.  \n",
    "* it is easier to enforce positive-definiteness through constraints on the elements of a decomposition than through a covariance matrix itself. The decomposition's only constraint is that its diagonal elements are positive, a condition that is easy to parameterize for."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Further reading and resources\n",
    "* https://www.tensorflow.org/probability/api_docs/python/tfp/distributions/MultivariateNormalTriL\n",
    "* https://www.tensorflow.org/api_docs/python/tf/linalg/cholesky"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
